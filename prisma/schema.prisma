// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  imageUrl    String?
  price       Float?
  orders      Order[]
}

model Order {
  id              Int               @id @default(autoincrement())
  userId          String
  productId       Int // Corrigido para o tipo Int
  adressId        Int
  value           Float?
  user            User              @relation(fields: [userId], references: [id])
  product         Product           @relation(fields: [productId], references: [id])
  OrderIngredient OrderIngredient[]
  adress          Adress            @relation(fields: [adressId], references: [id])
}

model Ingredient {
  id              Int               @id @default(autoincrement())
  name            String
  value           Float?
  step            String
  OrderIngredient OrderIngredient[]
}

model Adress {
  id          Int     @id @default(autoincrement())
  name        String
  num         Int
  bairro      String
  complemento String
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  Order       Order[]
}

model OrderIngredient {
  id           Int        @id @default(autoincrement())
  orderId      Int
  ingredientId Int
  quantity     Int
  order        Order      @relation(fields: [orderId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleUser {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role RoleUser @default(USER)

  accounts Account[]
  sessions Session[]
  orders   Order[]
  adress   Adress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
